#!/usr/bin/env ruby
require 'net/http'
require 'optparse'
require 'ostruct'
require 'json'
require 'colorize'

def load_env
  @domain = ENV['MAILGUN_DOMAIN']
  @secret = ENV['MAILGUN_SECRET']

  abort('Error: Set MAILGUN_DOMAIN') if @domain.nil?
  abort('Error: Set MAILGUN_SECRET') if @secret.nil?
end

def load_uri
  if @query_type == 'view'
    abort("Error: Where's the url, bro?") if @url.nil?
    url = @url
  elsif @query_type == 'bounces' and @address
    url = "https://api.mailgun.net/v3/#{@domain}/#{@query_type}/#{@address}"
  else
    query = URI.encode_www_form(@options.to_h)
    url = "https://api.mailgun.net/v3/#{@domain}/#{@query_type}?#{query}"
  end
  URI(url)
end

def request uri
  response = nil
  Net::HTTP.start(uri.host, uri.port, use_ssl: uri.scheme == 'https') do |http|
    klass = Object.const_get("Net::HTTP::#{@verb.capitalize}")
    request = klass.new uri.request_uri
    request.basic_auth 'api', @secret
    response = http.request request
  end
  response
end

def build_json_response
  response = request load_uri
  unless response.is_a? Net::HTTPSuccess
    abort("Error: Response code was #{response.code}\n#{response.body}")
  end
  JSON.parse(response.body)
end

def build_filename filename
  filename.gsub!(/^.*(\\|\/)/, '')
  filename.gsub!(/[^0-9A-Za-z.\-]/, '_')
  "#{filename.strip}_#{Time.now.to_i}.html"
end

def pretty_print_event_item item
  event = item['event'].upcase
  pretty_line = pretty_line_prefix item
  if event == 'FAILED'
    puts pretty_line_failed(pretty_line, item).to_s.red
  elsif ['DELIVERED', 'OPENED'].include? event
    puts pretty_line.to_s.green
  else
    puts pretty_line.to_s
  end
end

def pretty_line_failed pretty_line, item
  error_description = [
    item['delivery-status']['description'],
    item['delivery-status']['message']
  ].find { |m| !m.empty? }[0..70].gsub(/\s\w+$/, '...')
  "#{pretty_line}\t- #{item['delivery-status']['code']} - #{error_description}"
end

def pretty_line_prefix item
  "#{Time.at(item['timestamp'])}: " \
  "[#{item['event'].upcase}]" \
  "\t" \
  "[#{item['tags'].join(',')}] " \
  "#{item['recipient']}"
end

def pretty_print_bounce_item item
  pretty_line = "#{item['created_at']}: #{item['address']}"
  pretty_line = "#{pretty_line}\t- #{item['error'].red}"

  puts pretty_line.to_s
end

def pretty_print_item item
  if @query_type == 'bounces'
    pretty_print_bounce_item item
  else
    pretty_print_event_item item
  end
end

def pretty_print json_response
  json_response['items'].each do |item|
    pretty_print_item item
  end
end

def handle_fetch json_response
  if @options.pretty and !json_response['items'].nil?
    pretty_print json_response
  else
    puts JSON.pretty_generate(json_response)
  end
  p @options.to_h
end

def handle_view json_response
  filename = build_filename json_response['subject']
  File.open(filename.to_s, 'w') do |f|
    f.puts json_response['body-html']
  end
  system "open #{filename}"
end

def build_output json_response
  if @query_type == 'view'
    handle_view json_response
  else
    handle_fetch json_response
  end
end

@options = OpenStruct.new
@options.limit = 10
@options.pretty = true
@query_type = 'events'
@verb = 'GET'

OptionParser.new do |opts|
  opts.banner = 'Usage: mailqun [options]'

  opts.separator ''
  opts.separator 'Common options:'

  opts.on('-f [FROM]', '--from [FROM]', String,
          'Address of the sender') do |f|
    @options.from = f
  end

  opts.on('-t [TO]', '--to [TO]', String,
          'Address(es) the mail was sent to') do |t|
    @options.to = t
  end

  opts.on('-r [RECIPIENT]', '--recipient [RECEIVER]', String,
          'Address of the recipient') do |t|
    @options.recipient = t
  end

  opts.on('-s [SUBJECT]', '--subject [SUBJECT]', String,
          'Subject of mail') do |s|
    @options.subject = s
  end

  opts.on('-l [LIMIT]', '--limit [LIMIT]', Integer,
          'Limit on number of results') do |l|
    @options.limit = l
  end

  opts.on('--tags [TAG]', String,
          'Value in X-Mailgun-Tag header') do |t|
    @options.tags = t
  end

  opts.on('-e [EVENT]', '--event [EVENT]', String,
          'Event being queried') do |e|
    @options.event = e
  end

  opts.on('--raw',
          'Gives raw json response, instead of summary') do |_e|
    @options.pretty = false
  end

  opts.separator ''
  opts.separator 'Bounce options:'

  opts.on('--bounces',
          'Add this option to query bounces instead of events') do |_e|
    @query_type = 'bounces'
  end

  opts.on('-a [ADDRESS]', '--address [ADDRESS]', String,
          'Bounced address, used with --bounces') do |a|
    @address = a if @query_type == 'bounces'
  end

  opts.on('--delete [ADDRESS]', String,
          'Delete address from bounces, used with --bounces') do |a|
    if @query_type == 'bounces'
      @address = a
      @verb = 'DELETE'
    end
  end

  opts.separator ''
  opts.separator 'View options:'

  opts.on('--view-body [URL]',
          'Mailgun storage URL to fetch email body from') do |u|
    @url = u
    @query_type = 'view'
  end
end.parse!

load_env

json_response = build_json_response

build_output json_response
