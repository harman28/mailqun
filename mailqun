#!/usr/bin/env ruby
require 'net/http'
require 'optparse'
require 'ostruct'
require 'json'

def load_env
  @domain = ENV['MAILGUN_DOMAIN']
  @secret = ENV['MAILGUN_SECRET']
end

def load_uri
  if @query_type == 'view'
    abort("Error: Where's the url, bro?") if @url.nil?
    url = @url
  elsif @query_type == 'bounces' and @address
    url = "https://api.mailgun.net/v3/#{@domain}/#{@query_type}/#{@address}"
  else
    query = URI.encode_www_form(@options.to_h)
    url = "https://api.mailgun.net/v3/#{@domain}/#{@query_type}?#{query}"
  end
  return URI(url)
end

def request uri
  response = nil
  Net::HTTP.start(uri.host, uri.port, :use_ssl => uri.scheme == 'https') do |http|
    klass = Object.const_get("Net::HTTP::#{@verb.capitalize}")
    request = klass.new uri.request_uri
    request.basic_auth 'api', @secret
    response = http.request request
  end
  return response
end

def get_json_response
  response = request load_uri
  unless response.kind_of? Net::HTTPSuccess
    abort("Error: Response code was #{response.code}\n#{response.body}")
  end
  JSON.parse(response.body)
end

def get_filename filename
  filename.gsub!(/^.*(\\|\/)/, '')
  filename.gsub!(/[^0-9A-Za-z.\-]/, '_')
  "#{filename.strip}_#{Time.now.to_i}.html"
end

def handle_fetch json_response
  puts JSON.pretty_generate(json_response)
  p @options.to_h
end

def handle_view json_response
  filename = get_filename json_response['subject']
  open("#{filename}", 'w') do |f|
    f.puts json_response['body-html']
  end
  system "open #{filename}"
end

def build_output json_response
  if @query_type == 'view'
    handle_view json_response
  else
    handle_fetch json_response
  end
end

@options = OpenStruct.new
@options.limit = 10
@query_type = 'events'
@verb = 'GET'

OptionParser.new do |opts|
  opts.banner = "Usage: mailqun [options]"

  opts.separator ""
  opts.separator "Common options:"

  opts.on("-f [FROM]", "--from [FROM]", String,
          "Address of the sender") do |f|
    @options.from = f
  end

  opts.on("-t [TO]", "--to [TO]", String,
          "Address of the receiver") do |t|
    @options.to = t
  end

  opts.on("-s [SUBJECT]", "--subject [SUBJECT]", String,
          "Subject of mail") do |s|
    @options.subject = s
  end

  opts.on("-l [LIMIT]", "--limit [LIMIT]", Integer,
          "Limit on number of results") do |l|
    @options.limit = l
  end

  opts.on("--tags [TAG]", String,
          "Value in X-Mailgun-Tag header") do |t|
    @options.tags = t
  end

  opts.on("-e [EVENT]", "--event [EVENT]", String,
          "Event being queried") do |e|
    @options.event = e
  end

  opts.separator ""
  opts.separator "Bounce options:"

  opts.on("--bounces",
          "Add this option to query bounces instead of events") do |e|
    @query_type = 'bounces'
  end

  opts.on("-a [ADDRESS]", "--address [ADDRESS]", String,
          "Bounced address, used with --bounces") do |a|
    if @query_type == 'bounces'
      @address = a
    end
  end

  opts.on("--delete [ADDRESS]", String,
          "Delete address from bounces, used with --bounces") do |a|
    if @query_type == 'bounces'
      @address = a
      @verb = 'DELETE'
    end
  end

  opts.separator ""
  opts.separator "View options:"

  opts.on("--view-body [URL]",
          "Mailgun storage URL to fetch email body from") do |u|
    @url = u
    @query_type = 'view'
  end
end.parse!

load_env

json_response = get_json_response

build_output json_response
